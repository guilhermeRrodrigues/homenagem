#!/bin/bash

# ==========================================
# Script de Monitoramento - Site de Homenagens
# ==========================================

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}=========================================="
echo "ðŸ“Š Monitoramento - Site de Homenagens"
echo "==========================================${NC}"

# FunÃ§Ã£o para verificar status
check_status() {
    local service=$1
    local description=$2
    
    if systemctl is-active --quiet $service; then
        echo -e "${GREEN}âœ“ $description${NC}"
        return 0
    else
        echo -e "${RED}âœ— $description${NC}"
        return 1
    fi
}

# 1. Status dos containers
echo -e "\n${BLUE}=== STATUS DOS CONTAINERS ===${NC}"
docker-compose ps

# 2. Status dos serviÃ§os
echo -e "\n${BLUE}=== STATUS DOS SERVIÃ‡OS ===${NC}"
check_status "docker.service" "Docker Service"
check_status "omenagem.service" "AplicaÃ§Ã£o (Systemd)"

# 3. VerificaÃ§Ã£o de portas
echo -e "\n${BLUE}=== PORTAS EM USO ===${NC}"
ss -tulpn | grep -E ":(80|8080|5000)" | while read line; do
    echo -e "${GREEN}âœ“ $line${NC}"
done

# 4. Health check da aplicaÃ§Ã£o
echo -e "\n${BLUE}=== HEALTH CHECK ===${NC}"
if curl -s http://localhost:8080/api/health > /dev/null; then
    echo -e "${GREEN}âœ“ AplicaÃ§Ã£o respondendo${NC}"
    
    # Mostrar informaÃ§Ãµes detalhadas
    echo -e "\n${YELLOW}InformaÃ§Ãµes da aplicaÃ§Ã£o:${NC}"
    curl -s http://localhost:8080/api/health | python3 -m json.tool 2>/dev/null || curl -s http://localhost:8080/api/health
else
    echo -e "${RED}âœ— AplicaÃ§Ã£o nÃ£o estÃ¡ respondendo${NC}"
fi

# 5. Uso de recursos
echo -e "\n${BLUE}=== USO DE RECURSOS ===${NC}"
echo -e "${YELLOW}Containers:${NC}"
docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}"

# 6. EspaÃ§o em disco
echo -e "\n${YELLOW}EspaÃ§o em disco:${NC}"
df -h / | tail -1 | awk '{print "Uso: " $5 " (" $3 "/" $2 ")"}'

# 7. VerificaÃ§Ã£o de arquivos importantes
echo -e "\n${BLUE}=== ARQUIVOS IMPORTANTES ===${NC}"
if [ -f "/tmp/tributes_data.json" ]; then
    echo -e "${GREEN}âœ“ Arquivo de dados existe${NC}"
    tribute_count=$(cat /tmp/tributes_data.json | grep -o '"id"' | wc -l)
    echo -e "  â€¢ Homenagens: ${YELLOW}$tribute_count${NC}"
else
    echo -e "${RED}âœ— Arquivo de dados nÃ£o encontrado${NC}"
fi

if [ -d "static/uploads" ]; then
    echo -e "${GREEN}âœ“ DiretÃ³rio de uploads existe${NC}"
    upload_count=$(find static/uploads -type f | wc -l)
    echo -e "  â€¢ Imagens: ${YELLOW}$upload_count${NC}"
else
    echo -e "${RED}âœ— DiretÃ³rio de uploads nÃ£o encontrado${NC}"
fi

# 8. Logs recentes
echo -e "\n${BLUE}=== LOGS RECENTES ===${NC}"
echo -e "${YELLOW}Ãšltimas 5 linhas dos logs da aplicaÃ§Ã£o:${NC}"
docker-compose logs --tail=5 web

# 9. Status do firewall
echo -e "\n${BLUE}=== FIREWALL ===${NC}"
sudo ufw status | grep -E "(8080|80|443)" | while read line; do
    echo -e "${GREEN}âœ“ $line${NC}"
done

# 10. Conectividade externa
echo -e "\n${BLUE}=== CONECTIVIDADE EXTERNA ===${NC}"
if timeout 5 curl -s http://45.70.136.66:8080/api/health > /dev/null 2>&1; then
    echo -e "${GREEN}âœ“ Acesso externo funcionando${NC}"
else
    echo -e "${YELLOW}âš  Acesso externo pode nÃ£o estar funcionando${NC}"
fi

# 11. Resumo
echo -e "\n${BLUE}=========================================="
echo "ðŸ“‹ RESUMO"
echo "==========================================${NC}"

# Contar problemas
problems=0

if ! docker-compose ps | grep -q "Up"; then
    ((problems++))
fi

if ! curl -s http://localhost:8080/api/health > /dev/null; then
    ((problems++))
fi

if [ $problems -eq 0 ]; then
    echo -e "${GREEN}ðŸŽ‰ Tudo funcionando perfeitamente!${NC}"
    echo -e "\n${BLUE}URLs de acesso:${NC}"
    echo -e "  â€¢ Site: ${YELLOW}http://45.70.136.66:8080${NC}"
    echo -e "  â€¢ Admin: ${YELLOW}http://45.70.136.66:8080/admin${NC}"
else
    echo -e "${RED}âš  $problems problema(s) detectado(s)${NC}"
    echo -e "\n${YELLOW}Comandos para diagnÃ³stico:${NC}"
    echo -e "  â€¢ Ver logs: ${YELLOW}docker-compose logs -f web${NC}"
    echo -e "  â€¢ Reiniciar: ${YELLOW}docker-compose restart${NC}"
    echo -e "  â€¢ Teste completo: ${YELLOW}./test-deploy.sh${NC}"
fi

echo -e "\n${BLUE}==========================================${NC}"